  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
  }

  model User {
    //user profile details
    id                              String   @id @default(auto()) @map("_id") @db.ObjectId
    username                        String   @unique
    email                           String   @unique
    //image - profile picture of the user
    image                           String?
    hashedPassword                  String?
    createdAt                       DateTime @default(now())
    updatedAt                       DateTime @updatedAt
    verifyCode                      String
    verifyCodeExpiry                DateTime
    isVerified                      Boolean  @default(false)

    //private many to one anonymous free messages toggle
    isAcceptingAnonymousMessages    Boolean  @default(true)

    //details to exrtact from the registration number
    course                          String?
    batch                           String?
    branch                          String?

    //dormant fields , hoping to get it on , when i make a few more iterations over the code quality 
    loginDays                       Int?
    loginStreak                     Int?
    avatar                          String?
    honorScore                      Int      @default(100)

    //fields regarding the online status management
    lastSeen                        DateTime @default(now())
    activeStatus                    Boolean  @default(false)

    // Anonymous Messages, could have linked in better way but this seems fine since i expect it to be of smaller size
    anonymousMessages               AnonymousMessage[]

    // Relations
    conversationIds                 String[] @db.ObjectId @default([])
    conversations                   Conversation[] @relation(fields: [conversationIds], references: [id])

    seenMessageIds                  String[] @db.ObjectId @default([])
    seenMessages                    Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

    messages                        Message[]
  }

  model AnonymousMessage {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    content     String
    createdAt   DateTime @default(now())

    // Relation to User
    userId      String   @db.ObjectId
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  }

  model Conversation {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId 
    createdAt          DateTime @default(now())
    lastMessageAt      DateTime @default(now())
    name               String? 
    isGroup            Boolean?
    isAnonymous        Boolean? @default(false)
    // @relations fields

    //userId and and users with access to the conversation are stored here
    userIds            String[] @db.ObjectId
    users              User[]   @relation(fields: [userIds], references: [id])

    //the actual thing- store the message in an array
    messagesIds        String[] @db.ObjectId
    messages           Message[]
  }

  model Message {
    //message can be image or a simple text , but i believe  i have handled both using body , maybe needs an iteration over here
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    body               String?
    image              String?
    createdAt          DateTime @default(now())
    
    // @relations feilds 
    seenIds            String[] @db.ObjectId
    seen               User[]   @relation("Seen", fields: [seenIds], references: [id])

    conversationId     String   @db.ObjectId
    conversation       Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    senderId           String   @db.ObjectId
    sender             User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  }

